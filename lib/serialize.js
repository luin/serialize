// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var CIRCULARFLAG, DATEFLAG, FUNCBODY, FUNCFLAG, INFINITYFLAG, ISNATIVEFUNC, KEYPATHSEPARATOR, PROTOFLAG, PROTOTYPEFLAG, UNDEFINEDFLAG, getKeyPath, serializeCircular, serializeFunction, serializeObject, serializeWrapped, unserializeFunction, unserializeWrapped;

  FUNCFLAG = '_$$ND_FUNC$$_';

  FUNCBODY = '_$$ND_FUNCBODY$$_';

  PROTOFLAG = '_$$ND_PROTO$$_';

  PROTOTYPEFLAG = '_$$ND_PROTOTYPE$$_';

  CIRCULARFLAG = '_$$ND_CC$$_';

  DATEFLAG = '_$$ND_DATE$$_';

  INFINITYFLAG = '_$$ND_INFINITY$$_';

  UNDEFINEDFLAG = '_$$ND_UNDEFINED$$_';

  KEYPATHSEPARATOR = '_$$.$$_';

  ISNATIVEFUNC = /^function\s*[^(]*\(.*\)\s*\{\s*\[native code\]\s*\}$/;

  getKeyPath = function(obj, path) {
    var currentObj, e, error;
    try {
      path = path.split(KEYPATHSEPARATOR);
      currentObj = obj;
      path.forEach(function(p, index) {
        if (index) {
          currentObj = currentObj[p];
        }
      });
      return currentObj;
    } catch (error) {
      e = error;
      return false;
    }
  };

  serializeCircular = function(obj, cache) {
    var subKey;
    for (subKey in cache) {
      if (cache.hasOwnProperty(subKey)) {
        if (cache[subKey] === obj) {
          return CIRCULARFLAG + subKey;
        }
      }
    }
    return false;
  };

  serializeFunction = function(func, ignoreNativeFunc) {
    var funcStr;
    funcStr = func.toString();
    if (ISNATIVEFUNC.test(funcStr)) {
      if (ignoreNativeFunc) {
        funcStr = 'function() {throw new Error("Call a native function unserialized")}';
      } else {
        throw new Error('Can\'t serialize a object with a native function property. Use serialize(obj, true) to ignore the error.');
      }
    }
    return funcStr;
  };

  unserializeFunction = function(func, originObj) {
    var funcObj, key;
    funcObj = eval('( ' + func[FUNCFLAG] + ' )');
    delete func[FUNCFLAG];
    for (key in func) {
      funcObj[key] = func[key];
    }
    return funcObj;
  };

  serializeWrapped = function(obj) {
    if (obj instanceof Date) {
      return DATEFLAG + obj.getTime();
    }
    if (obj === void 0) {
      return UNDEFINEDFLAG;
    }
    if (obj === Infinity) {
      return INFINITYFLAG;
    }
    return obj;
  };

  unserializeWrapped = function(str) {
    var dateNum;
    if (str.startsWith(DATEFLAG)) {
      dateNum = parseInt(str.slice(DATEFLAG.length), 10);
      return new Date(dateNum);
    } else if (str.startsWith(INFINITYFLAG)) {
      return Infinity;
    } else if (str.startsWith(UNDEFINEDFLAG)) {
      return void 0;
    } else {
      return str;
    }
  };

  serializeObject = function(obj, ignoreNativeFunc, outputObj, cache, path) {
    var keys, output;
    obj = serializeWrapped(obj);
    output = {};
    keys = Object.keys(obj);
    if (!path.endsWith('prototype') && !path.endsWith('__proto__')) {
      keys.push('prototype');
      keys.push('__proto__');
    }
    keys.forEach(function(key) {
      var destKey, found;
      if (obj.hasOwnProperty(key) || key === 'prototype' || key === '__proto__') {
        destKey = key === '__proto__' ? PROTOFLAG : key === 'prototype' ? PROTOTYPEFLAG : key;
        if ((typeof obj[key] === 'object' || typeof obj[key] === 'function') && obj[key] !== null) {
          found = serializeCircular(obj[key], cache);
          if (found) {
            return output[destKey] = found;
          } else {
            return output[destKey] = module.exports.serialize(obj[key], ignoreNativeFunc, outputObj[key], cache, path + KEYPATHSEPARATOR + key);
          }
        } else {
          return output[destKey] = serializeWrapped(obj[key]);
        }
      }
    });
    return output;
  };

  module.exports.serialize = function(obj, ignoreNativeFunc, outputObj, cache, path) {
    var found;
    path = path || '$';
    cache = cache || {};
    outputObj = outputObj || {};
    obj = serializeWrapped(obj);
    if (typeof obj === 'string' || typeof obj === 'number') {
      outputObj = obj;
    } else if (obj.constructor === Array) {
      outputObj = [];
      cache[path] = outputObj;
      obj.forEach(function(value, index) {
        outputObj.push(module.exports.serialize(value, ignoreNativeFunc, outputObj, cache, path + KEYPATHSEPARATOR + index));
      });
    } else {
      found = serializeCircular(obj, cache);
      if (found) {
        outputObj = found;
      } else {
        cache[path] = obj;
        outputObj = serializeObject(obj, ignoreNativeFunc, outputObj, cache, path);
        if (typeof obj === 'function') {
          outputObj[FUNCFLAG] = serializeFunction(obj, ignoreNativeFunc);
        }
      }
    }
    if (path === '$') {
      return JSON.stringify(outputObj);
    } else {
      return outputObj;
    }
  };

  module.exports.unserialize = function(obj, originObj) {
    var circularTasks, destKey, isIndex, key;
    isIndex = void 0;
    if (typeof obj === 'string') {
      obj = JSON.parse(obj);
    }
    originObj = originObj || obj;
    if (obj && obj[FUNCFLAG]) {
      obj = unserializeFunction(obj);
    }
    if (typeof obj === 'string') {
      obj = unserializeWrapped(obj);
    }
    circularTasks = [];
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        destKey = key === PROTOFLAG ? '__proto__' : key === PROTOTYPEFLAG ? 'prototype' : key;
        if (destKey === 'prototype' && obj[key] === UNDEFINEDFLAG) {
          delete obj[key];
          continue;
        }
        if (typeof obj[key] === 'object' || typeof obj[key] === 'function') {
          obj[destKey] = module.exports.unserialize(obj[key], originObj);
        } else if (typeof obj[key] === 'string') {
          if (obj[key].indexOf(CIRCULARFLAG) === 0) {
            obj[key] = obj[key].substring(CIRCULARFLAG.length);
            circularTasks.push({
              obj: obj,
              sourceKey: key,
              destKey: destKey
            });
          } else {
            obj[destKey] = unserializeWrapped(obj[key]);
          }
        }
      }
    }
    circularTasks.forEach(function(task) {
      var found;
      found = getKeyPath(originObj, task.obj[task.sourceKey]);
      if (found) {
        return task.obj[task.destKey] = found;
      }
    });
    delete obj[PROTOTYPEFLAG];
    delete obj[PROTOFLAG];
    return obj;
  };

}).call(this);
